from telebot import types
import reading.reading_questions
import threading
import time

class ReadingTest:
    def __init__(self, bot):
        self.bot = bot
        self.questions = reading.reading_questions.questions
        self.user_answers = {}
        self.user_messages = {}
        self.timer_threads = {}  # —Ç—É—Ç –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ø–æ—Ç–æ–∫–∏ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        self.test_duration = 2 * 60  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 5 –º–∏–Ω—É—Ç —Ç–µ—Å—Ç–∞ (–º–æ–∂–µ—à—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ—ë)


    def start_test(self, message):
        chat_id = message.chat.id
        self.user_answers[chat_id] = []
        self.user_messages[chat_id] = []

        # –û—Ç–ø—Ä–∞–≤–∫–∞ PDF
        with open('reading/reading_passage.pdf', 'rb') as f:
            self.bot.send_document(chat_id, f)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        for idx, q in enumerate(self.questions):
            markup = types.InlineKeyboardMarkup()
            for i, option in enumerate(q["options"]):
                callback_data = f"q:{idx}:{i}"
                markup.add(types.InlineKeyboardButton(option, callback_data=callback_data))
            
            sent_msg = self.bot.send_message(chat_id, f"<b>{q['text']}</b>", reply_markup=markup, parse_mode="HTML")
            self.user_messages[chat_id].append(sent_msg.message_id)

        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
        confirm_markup = types.InlineKeyboardMarkup()
        confirm_markup.add(types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–≤–µ—Ç—ã", callback_data="confirm"))
        self.bot.send_message(chat_id, "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.", reply_markup=confirm_markup)

        # ‚û°Ô∏è  –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
        self.test_start_time = self.test_start_time if hasattr(self, 'test_start_time') else {}
        self.timer_message_id = self.timer_message_id if hasattr(self, 'timer_message_id') else {}

        self.test_start_time[chat_id] = time.time()

        timer_message = self.bot.send_message(chat_id, f"‚è≥ –í—Ä–µ–º—è –æ—Å—Ç–∞–ª–æ—Å—å: {self.format_time(self.test_duration)}")
        self.timer_message_id[chat_id] = timer_message.message_id

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–µ–Ω–Ω–æ timer_thread
        timer_thread = threading.Thread(target=self.timer_thread, args=(chat_id,))
        timer_thread.start()
        self.timer_threads[chat_id] = timer_thread


    def handle_answer(self, call):
        chat_id = call.message.chat.id
        if chat_id not in self.user_answers or chat_id not in self.user_messages:
            self.bot.answer_callback_query(call.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–∞—á–∞–ª–∞ /start")
            return

        # –†–∞—Å–ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        _, q_idx, option_idx = call.data.split(":")
        q_idx = int(q_idx)
        option_idx = int(option_idx)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —É–∂–µ —ç—Ç–æ—Ç –∂–µ –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
        if len(self.user_answers[chat_id]) > q_idx and self.user_answers[chat_id][q_idx] == option_idx:
            self.bot.answer_callback_query(call.id, text="–≠—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω ‚úÖ")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        while len(self.user_answers[chat_id]) <= q_idx:
            self.user_answers[chat_id].append(None)
        self.user_answers[chat_id][q_idx] = option_idx

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        q = self.questions[q_idx]
        markup = types.InlineKeyboardMarkup()
        for i, option in enumerate(q["options"]):
            text = f"üîµ {option} (–≤—ã–±—Ä–∞–Ω–æ)" if i == option_idx else option
            callback_data = f"q:{q_idx}:{i}"
            markup.add(types.InlineKeyboardButton(text, callback_data=callback_data))

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.bot.edit_message_reply_markup(chat_id=chat_id,
                                           message_id=self.user_messages[chat_id][q_idx],
                                           reply_markup=markup)

        self.bot.answer_callback_query(call.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {q['options'][option_idx]}")


    def timer_thread(self, chat_id):
        while True:
            elapsed = time.time() - self.test_start_time[chat_id]
            remaining = self.test_duration - elapsed
            if remaining <= 0:
                # –í—Ä–µ–º—è –≤—ã—à–ª–æ!
                try:
                    self.bot.edit_message_text(chat_id=chat_id,
                                               message_id=self.timer_message_id[chat_id],
                                               text="‚è≥ –í—Ä–µ–º—è –≤—ã—à–ª–æ!")
                    self.force_finish(chat_id)
                except Exception as e:
                    print(e)
                break

            try:
                self.bot.edit_message_text(chat_id=chat_id,
                                           message_id=self.timer_message_id[chat_id],
                                           text=f"‚è≥ –í—Ä–µ–º—è –æ—Å—Ç–∞–ª–æ—Å—å: {self.format_time(remaining)}")
            except Exception as e:
                print(e)


            time.sleep(1)


    def format_time(self, seconds):
        minutes = int(seconds) // 60
        seconds = int(seconds) % 60
        return f"{minutes:02d}:{seconds:02d}"


    def handle_confirm(self, call):
        chat_id = call.message.chat.id
        answers = self.user_answers.get(chat_id, [])
        text = "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n"
        for idx, answer in enumerate(answers):
            if answer is not None:
                text += f"–í–æ–ø—Ä–æ—Å {idx+1}: {self.questions[idx]['options'][answer]}\n"
            else:
                text += f"–í–æ–ø—Ä–æ—Å {idx+1}: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞\n"
        self.bot.send_message(chat_id, text)


    def force_finish(self, chat_id):
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        answers = self.user_answers.get(chat_id, [])
        text = "‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n"
        for idx, answer in enumerate(answers):
            if answer is not None:
                text += f"–í–æ–ø—Ä–æ—Å {idx+1}: {self.questions[idx]['options'][answer]}\n"
            else:
                text += f"–í–æ–ø—Ä–æ—Å {idx+1}: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞\n"
        self.bot.send_message(chat_id, text)


    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –≤—ã–≤–æ–¥ –±–∞–ª–ª–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        # def __init__(self, bot):
        # self.bot = bot
        # self.questions = [
        #     {
        #         'question': '–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ 1...',
        #         'options': [
        #             '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 1',
        #             '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 2',
        #             '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 3',
        #             '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 4'
        #         ],
        #         'correct_answer': 0  # –ò–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        #     },
        #     {
        #         'question': '–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ 2...',
        #         'options': [
        #             '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 1',
        #             '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 2',
        #             '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 3',
        #             '–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ 4'
        #         ],
        #         'correct_answer': 1
        #     },
        # ]
        # self.current_question = 0
        # self.score = 0
        # self.start_time = time.time()
        # self.TEST_DURATION = 2100

    # def start_test(self, message):
    #     self.send_question(message.chat.id)

    # def send_question(self, chat_id):
    #     question_data = self.questions[self.current_question]
    #     keyboard = types.InlineKeyboardMarkup()

    #     for i, option in enumerate(question_data['options']):
    #         keyboard.add(types.InlineKeyboardButton(text=option, callback_data=f'answer_{i}'))

    #     question_text = f"–í–æ–ø—Ä–æ—Å {self.current_question + 1}/{len(self.questions)}\n\n{question_data['question']}"
    #     self.bot.send_message(chat_id, question_text, reply_markup=keyboard)

    # def handle_answer(self, call):
    #     if self.current_question >= len(self.questions):
    #         print("No more questions left.")  # Debug
    #         self.finish_test(call.message.chat.id)
    #         return

    #     try:
    #         chat_id = call.message.chat.id
    #         print(f"Handling answer for chat {chat_id}, current question: {self.current_question}")  # Debug log

    #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ —Ç–µ—Å—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    #         if time.time() - self.start_time > self.TEST_DURATION:
    #             print("Test time expired")  # Debug log
    #             self.finish_test(chat_id)
    #             return

    #         # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #         try:
    #             answer_index = int(call.data.split('_')[1])
    #             print(f"User selected answer {answer_index}")  # Debug log
    #         except (IndexError, ValueError) as e:
    #             print(f"Error parsing answer: {e}")  # Debug log
    #             self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    #             return

    #         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    #         current_question_data = self.questions[self.current_question]
    #         if answer_index == current_question_data['correct_answer']:
    #             self.score += 1
    #             print("Answer is correct")  # Debug log
    #         else:
    #             print("Answer is wrong")  # Debug log

    #         # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)
    #         try:
    #             self.bot.delete_message(chat_id, call.message.message_id)
    #             print("Previous question message deleted")  # Debug log
    #         except Exception as e:
    #             print(f"Could not delete message: {e}")  # Debug log

    #         # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    #         self.current_question += 1

    #         if self.current_question < len(self.questions):
    #             print(f"Moving to question {self.current_question}")  # Debug log
    #             self.send_question(chat_id)
    #         else:
    #             print("Test completed")  # Debug log
    #             self.finish_test(chat_id)

    #     except Exception as e:
    #         print(f"Unexpected error in handle_answer: {e}")  # Debug log
    #         self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –¢–µ—Å—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
    #         self.finish_test(chat_id)

    # def finish_test(self, chat_id):
    #     total = len(self.questions)
    #     percentage = (self.score / total) * 100

    #     result_text = f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {self.score}/{total}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {percentage:.1f}%\n\n"
    #     result_text += "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:\n"
    #     for i, question in enumerate(self.questions):
    #         result_text += f"{i + 1}. {question['options'][question['correct_answer']]}\n"

    #     self.bot.send_message(chat_id, result_text)